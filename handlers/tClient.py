import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from db import BotDB
from config import *
from language import t
from io import BytesIO
from PIL import Image

db = BotDB()

class Passenger:
    def __init__(self):
        pass

    def init(self):
        print('This is a Passenger class')

    async def getClientOrders(self, message, offset, message_id, chat_id):
        if not db.userGet(message.from_user.id, 'client'):
            await message.bot.send_message(message.from_user.id, t('Client not found'))
        else:
            client_model = db.userGet(message.from_user.id, 'client')
            if not client_model:
                await message.bot.send_message(message.from_user.id, t("Unable to find customer"))
                pass
            else:
                model_orders = db.get_client_orders_by_one(message.from_user.id, offset)
                model_orders_cn = len(db.get_client_orders(message.from_user.id))
                if model_orders_cn == 0:
                    await message.bot.send_message(message.from_user.id, t("You haven`t orders"))
                else:
                    for row in model_orders:
                        try:
                            status = db.statuses[row['status']]
                        except:
                            status = db.statuses['unknown']
                        if not row['dt_order']:
                            date_format = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        else:
                            date_format = datetime.strptime(str(row['dt_order']), "%Y-%m-%d %H:%M:%S").strftime("%H:%M %d-%m-%Y")
                        text = '\n'.join((
                            '<b>–ó–∞–∫–∞–∑ ‚Ññ' + str(row['id']) + '</b>',
                            '–ò–º—è <b>' + str(client_model['name']) + '</b>',
                            '–°—Ç–∞—Ç—É—Å <b>' + status + '</b>',
                            '–î–∞—Ç–∞ <b>' + str(date_format) + '</b>',
                            '–°—Ç–æ–∏–º–æ—Å—Ç—å <b>' + str(row['amount_client']) + ' ' + str(CURRENCY) + '</b>',
                            '–î–ª–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞ <b>' + str(row['route_length'] / 1000) + ' –∫–º.' + '</b>',
                            '–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ <b>' + str(row['route_time']) + ' –º–∏–Ω.' + '</b>'
                        ))
                        if message_id == 0:
                            message = await message.bot.send_message(message.from_user.id, '.')
                            message_id = message.message_id
                            chat_id = message.chat.id
                            pass
                        markup_back = InlineKeyboardMarkup(row_width=2)
                        callback_backward = 'client-orders_' + str(offset - 1) + '_' + str(message_id) + '_' + str(chat_id)
                        callback_forward = 'client-orders_' + str(offset + 1) + '_' + str(message_id) + '_' + str(chat_id)
                        if (offset + 1) == model_orders_cn:
                            markup_back.add(InlineKeyboardButton(text='‚óÄÔ∏è', callback_data = callback_backward))
                        elif offset == 0:
                            markup_back.add(InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data = callback_forward))
                        else:
                            markup_back.add(
                                InlineKeyboardButton(text='‚óÄÔ∏è', callback_data = callback_backward),
                                InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data = callback_forward)
                            )
                        markup_back.add(InlineKeyboardButton(text=t('Back') + ' ‚Ü©', callback_data='client'))
                        await message.bot.edit_message_text(chat_id = chat_id, message_id = message_id, text = text, reply_markup = markup_back)
                        pass
                pass
    async def rules(self, message):
        caption = '''<b>–î–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤</b>
    –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —É–¥–æ–±–Ω–æ –∏ –Ω–µ–¥–æ—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏ (—á–∞—Å—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è).

     ‚Ä¢ –ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ü–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏?
    –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1–∫–º = {rate1KM:d}{currency:s}
    ‚ÑπÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–∫–º).
    –ö –ø—Ä–∏–º–µ—Ä—É —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {kilometers:d}–∫–º —Å–æ—Å—Ç–∞–≤–∏—Ç {amountKM:d}{currency:s} ({kilometers:d}–∫–º * {rate1KM:d}{currency:s} = {amountKM:d}{currency:s})

     ‚Ä¢ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–µ–∑–¥–∫—É?
    –ü–æ–µ–∑–¥–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞–ø—Ä—è–º—É—é –≤–æ–¥–∏—Ç–µ–ª—é
    ‚ÑπÔ∏è –ó–∞—Ä–∞–Ω–µ–µ –ø–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –Ω–∞–ª–∏—á–∏–∏ —Ä–∞–∑–º–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ —É –≤–æ–¥–∏—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–¥–∞—á–∞
    ‚ÑπÔ∏è –ø–æ–µ–∑–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω–∞ –≤ —Å—É–º–º–µ –Ω–µ –º–µ–Ω—å—à–µ–π, —á–µ–º —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ß–∞–µ–≤—ã–µ –≤–æ–¥–∏—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è

     ‚Ä¢ –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?
    –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–ø–∏—Å–∞–Ω—ã –Ω–∏–∂–µ:
     1. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ò–º—è, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ÑπÔ∏è —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞—á–∏–Ω–∞—è —Å–æ –∑–Ω–∞–∫–∞ ¬´+¬ª, –¥–∞–ª–µ–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ —Å–∫–æ–±–æ–∫ –∏ —Ç–∏—Ä–µ
     2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –û–î–ù–ò–ú –∏–∑ 3-—Ö —Å–ø–æ—Å–æ–±–æ–≤:
      1Ô∏è‚É£ —Å–ø–æ—Å–æ–± - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ
      2Ô∏è‚É£ —Å–ø–æ—Å–æ–± - –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ö–ê–¢–ê–õ–û–ì–ï –ú–ï–°–¢
      3Ô∏è‚É£ —Å–ø–æ—Å–æ–± - —É–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ —á–µ—Ä–µ–∑ –°–ö–†–ï–ü–ö–£+–õ–û–ö–ê–¶–ò–Ø
     (–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Ñ–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ) –∫ —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É
     3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ
     4. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å
     5. –ö–æ–≥–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–µ–∑–¥–∫–∏
     6. –ü–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –æ—Ü–µ–Ω–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É

     ‚Ä¢ –∫—Ç–æ –º–µ–Ω—è –ø–æ–≤–µ–∑–µ—Ç?
    –ù–∞—à –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –ë–æ—Ç —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è, –∏ –¥–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è–º —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏

     ‚Ä¢ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è?
    –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ—Ç–∞ {adminTg:s}

    üëâ –°—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –≤–æ–¥–∏—Ç–µ–ª—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–µ–∑–¥–∫–∏
    üëâ –ü—Ä–∏ –∑–∞–∫–∞–∑–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è
    üëâ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —ç—Ç–æ—Ç –±–æ—Ç
    '''
        kilometers = 14
        amountKM = RATE_1_KM * 14
        caption = caption.format(
            rate1KM = RATE_1_KM,
            amountKM = amountKM,
            kilometers = kilometers,
            adminTg = ADMIN_TG,
            currency = CURRENCY
        )
        back_client_menu = InlineKeyboardMarkup(row_width=1)
        back_client_menu.add(InlineKeyboardButton(text=t('Back') + ' ‚Ü©', callback_data='client'))
        await message.bot.send_message(message.from_user.id, caption)
        bio = BytesIO()
        image = Image.open('rules_1.jpeg')
        image.save(bio, 'JPEG')
        bio.seek(0)
        await message.bot.send_photo(message.from_user.id, bio, reply_markup = back_client_menu)
        pass

